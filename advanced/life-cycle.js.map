{"version":3,"sources":["webpack:///advanced/life-cycle.js","webpack:///./docs/advanced/life-cycle.md"],"names":["webpackJsonp","999","module","exports","content","extra"],"mappings":"AAAAA,cAAc,GAAG,KAEXC,IACA,SAAUC,EAAQC,GCFxBD,EAAAC,SACAC,QAAA,yfACAC","file":"advanced/life-cycle.js","sourcesContent":["webpackJsonp([13,15],{\n\n/***/ 999:\n/***/ (function(module, exports) {\n\n\t/*markdown-loader*/\n\tmodule.exports = {\n\t  \"content\": \"<p>VM 将 React 视图和数据绑在一起，成为一个节点，同时提供 <a href=\\\"/api/decorator#bindview\\\"><code>bindView</code></a> 和 <a href=\\\"/api/decorator#stateinout\\\"><code>stateInOut</code></a> 方法，\\n来实现 View 的生命周期来触发 Model 中对应的方法。</p>\\n<p>其次，我们建议 Model 都继承 <a href=\\\"/api/others#root\\\"><code>Root</code></a>， 是因为 Root 都预设了 <code>init/update/exit</code> 生命周期方法，而这些生命周期方法，\\n是 <code>urlSync/xxSync/autorun/reaction</code> 修饰器<strong>生效的关键</strong>。</p>\\n<p>同时我们也可以在 Model 的这些生命周期方法中去书写一些我们自己的逻辑，如可以在 <code>init</code> 中去做 fetch 操作等等。</p>\\n\",\n\t  \"extra\": {}\n\t}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// advanced/life-cycle.js","/*markdown-loader*/\nmodule.exports = {\n  \"content\": \"<p>VM 将 React 视图和数据绑在一起，成为一个节点，同时提供 <a href=\\\"/api/decorator#bindview\\\"><code>bindView</code></a> 和 <a href=\\\"/api/decorator#stateinout\\\"><code>stateInOut</code></a> 方法，\\n来实现 View 的生命周期来触发 Model 中对应的方法。</p>\\n<p>其次，我们建议 Model 都继承 <a href=\\\"/api/others#root\\\"><code>Root</code></a>， 是因为 Root 都预设了 <code>init/update/exit</code> 生命周期方法，而这些生命周期方法，\\n是 <code>urlSync/xxSync/autorun/reaction</code> 修饰器<strong>生效的关键</strong>。</p>\\n<p>同时我们也可以在 Model 的这些生命周期方法中去书写一些我们自己的逻辑，如可以在 <code>init</code> 中去做 fetch 操作等等。</p>\\n\",\n  \"extra\": {}\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/picidae/lib/lib/loaders/markdown-loader!./docs/advanced/life-cycle.md\n// module id = 999\n// module chunks = 13"],"sourceRoot":""}