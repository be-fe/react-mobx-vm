{"version":3,"sources":["webpack:///api/decorator.js","webpack:///./docs/api/decorator.md"],"names":["webpackJsonp","1002","module","exports","content","extra"],"mappings":"AAAAA,cAAc,GAAG,KAEXC,KACA,SAAUC,EAAQC,GCFxBD,EAAAC,SACAC,QAAA,839BACAC","file":"api/decorator.js","sourcesContent":["webpackJsonp([10,15],{\n\n/***/ 1002:\n/***/ (function(module, exports) {\n\n\t/*markdown-loader*/\n\tmodule.exports = {\n\t  \"content\": \"<div class=\\\"picidae-toc\\\">\\n<ul>\\n<li>\\n<a href=\\\"#autorun\\\">autorun</a>\\n</li>\\n<li>\\n<a href=\\\"#bindable\\\">bindable</a>\\n</li>\\n<li>\\n<a href=\\\"#binding\\\">binding</a>\\n</li>\\n<li>\\n<a href=\\\"#bindview\\\">bindView</a>\\n</li>\\n<li>\\n<a href=\\\"#collect\\\">collect</a>\\n</li>\\n<li>\\n<a href=\\\"#default_options\\\">DEFAULT_OPTIONS</a>\\n</li>\\n<li>\\n<a href=\\\"#inject\\\">inject</a>\\n</li>\\n<li>\\n<a href=\\\"#injectext\\\">injectExt</a>\\n</li>\\n<li>\\n<a href=\\\"#isviewmodelcomponent\\\">isViewModelComponent</a>\\n</li>\\n<li>\\n<a href=\\\"#mapping\\\">mapping</a>\\n</li>\\n<li>\\n<a href=\\\"#reactautorun\\\">reactAutorun</a>\\n</li>\\n<li>\\n<a href=\\\"#reaction\\\">reaction</a>\\n</li>\\n<li>\\n<a href=\\\"#reactreaction\\\">reactReaction</a>\\n</li>\\n<li>\\n<a href=\\\"#reactstoragesync\\\">reactStorageSync</a>\\n</li>\\n<li>\\n<a href=\\\"#reacturlsync\\\">reactUrlSync</a>\\n</li>\\n<li>\\n<a href=\\\"#registerurlsync\\\">registerUrlSync</a>\\n</li>\\n<li>\\n<a href=\\\"#stateinout\\\">stateInOut</a>\\n</li>\\n<li>\\n<a href=\\\"#stateless\\\">stateless</a>\\n</li>\\n<li>\\n<a href=\\\"#storagesync\\\">storageSync</a>\\n</li>\\n<li>\\n<a href=\\\"#urlsync\\\">urlSync</a>\\n</li>\\n</ul>\\n</div>\\n<hr>\\n<!-- Generated by documentation.js. Update this documentation by updating the source code. -->  \\n<h2 id=\\\"autorun\\\"><a href=\\\"#autorun\\\" aria-hidden=\\\"true\\\"><span class=\\\"icon icon-link\\\"></span></a>autorun</h2>\\n<p><a href=\\\"https://github.com/be-fe/react-mobx-vm/blob/2138b241540679e784e641a40781b5fdec56fd37/src/decorator/autorun/index.js#L33-L38\\\" title=\\\"Source code on GitHub\\\">src/decorator/autorun/index.js:33-38</a>  </p>\\n<p>监听数据发生改变之后，将会触发该成员方法，不同于 reaction  </p>\\n<p><strong>Examples</strong>  </p>\\n<pre><code class=\\\"hljs language-javascript\\\" data-query=\\\"{}\\\" data-lang=\\\"javascript\\\">@bindView(View)  \\n<span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">Model</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">Root</span> </span>{  \\n   @observable val = <span class=\\\"hljs-string\\\">'123'</span>  \\n   @observable deep = { <span class=\\\"hljs-attr\\\">key</span>: <span class=\\\"hljs-string\\\">'123'</span> }  \\n  \\n   @autorun  \\n   autorunMethod(dispose) {  \\n     <span class=\\\"hljs-comment\\\">// 当 `this.val`  </span>\\n     <span class=\\\"hljs-comment\\\">// 发生改变之后，将会触发该方法  </span>\\n     <span class=\\\"hljs-comment\\\">// 与`reaction`不同的是，它第一次初始化时会被触发  </span>\\n     <span class=\\\"hljs-built_in\\\">console</span>.log(<span class=\\\"hljs-keyword\\\">this</span>.val)  \\n     <span class=\\\"hljs-comment\\\">// 调用 dispose 则会销毁掉该监听  </span>\\n     dispose &#x26;&#x26; dispose()  \\n   }  \\n}  </code></pre>\\n<h2 id=\\\"bindable\\\"><a href=\\\"#bindable\\\" aria-hidden=\\\"true\\\"><span class=\\\"icon icon-link\\\"></span></a>bindable</h2>\\n<p><a href=\\\"https://github.com/be-fe/react-mobx-vm/blob/2138b241540679e784e641a40781b5fdec56fd37/src/decorator/binding/bindable.js#L201-L222\\\" title=\\\"Source code on GitHub\\\">src/decorator/binding/bindable.js:201-222</a>  </p>\\n<ul>\\n<li>\\n<p><strong>See: <a href=\\\"/examples/binding#bindable\\\">examples/binding#bindable</a></strong>  </p>\\n</li>\\n</ul>\\n<p>搭配<a href=\\\"#binding\\\">binding</a>使用，可以定义自己的 binding 规则  </p>\\n<p><strong>Parameters</strong>  </p>\\n<ul>\\n<li>\\n<p><code>options</code>  {object} (optional, default <code>DEFAULT_OPTIONS</code>)  </p>\\n<ul>\\n<li><code>options.cond</code>  {function} props => boolean<br>\\n是否匹配上 (optional, default <code>null</code>)  </li>\\n<li><code>options.prop</code>  {[[propName: string, transform: function] | string]}<br>\\n需要绑定的属性定义，可以通过 transform 进行转换 (optional, default <code>['value']</code>)  </li>\\n<li><code>options.event</code>  {[[propName: string, handler: function] | string]}<br>\\n需要绑定的属性定义，可以通过 transform 进行转换 (optional, default <code>['onChange']</code>)  </li>\\n</ul>\\n</li>\\n<li>\\n<p><code>tagName</code>  {String | ReactComponent}<br>\\n被绑定的组件，可以为 HTML标签名 或 ReactComponent  </p>\\n</li>\\n</ul>\\n<p><strong>Examples</strong>  </p>\\n<pre><code class=\\\"hljs language-javascript\\\" data-query=\\\"{}\\\" data-lang=\\\"javascript\\\">bindable([{  \\n   <span class=\\\"hljs-attr\\\">cond</span>: <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">props</span>) </span>{  \\n     <span class=\\\"hljs-keyword\\\">return</span> props.type === <span class=\\\"hljs-string\\\">'checkbox'</span>  \\n   },  \\n   <span class=\\\"hljs-attr\\\">prop</span>: [  \\n     [<span class=\\\"hljs-string\\\">'checked'</span>, <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">modelValue, propVal, props</span>) </span>{  \\n       <span class=\\\"hljs-keyword\\\">return</span> modelValue.includes(props.name)  \\n     }]  \\n   ],  \\n   <span class=\\\"hljs-attr\\\">event</span>: [  \\n     [<span class=\\\"hljs-string\\\">'onChange'</span>, <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">[evt], ctx</span>) </span>{  \\n       <span class=\\\"hljs-keyword\\\">const</span> { <span class=\\\"hljs-attr\\\">target</span>: { name, checked } } = evt  \\n       <span class=\\\"hljs-keyword\\\">const</span> list = ctx.get()  \\n       <span class=\\\"hljs-keyword\\\">let</span> i = list.indexOf(name)  \\n       i >= <span class=\\\"hljs-number\\\">0</span> &#x26;&#x26; list.splice(i, <span class=\\\"hljs-number\\\">1</span>)  \\n       <span class=\\\"hljs-keyword\\\">if</span> (checked) {  \\n         list.push(name)  \\n       }  \\n     }]  \\n   ]  \\n }].concat(DEFAULT_OPTIONS), <span class=\\\"hljs-string\\\">'input'</span>)  \\n  \\n <span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">Scope</span> </span>{  \\n   @observable value = <span class=\\\"hljs-string\\\">'val'</span>  \\n   @observable checkedList = []  \\n }  \\n <span class=\\\"hljs-keyword\\\">const</span> scope = <span class=\\\"hljs-keyword\\\">new</span> Scope  \\n  \\n @observer  \\n <span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">View</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">React</span>.<span class=\\\"hljs-title\\\">Component</span> </span>{  \\n   render() {  \\n     <span class=\\\"hljs-keyword\\\">return</span> (  \\n       <span class=\\\"xml\\\"><span class=\\\"hljs-tag\\\">&#x3C;<span class=\\\"hljs-name\\\">div</span>></span>  \\n         {binding(scope)(  \\n           </span>&#x3C;input type=\\\"text\\\" id=\\\"text\\\" data-bind=\\\"value\\\" data-scope={scope}/>,  \\n           &#x3C;input type=\\\"checkbox\\\" id=\\\"a_0\\\" data-bind=\\\"checkedList\\\" name={'a'}/>,  \\n           &#x3C;input type=\\\"checkbox\\\" id=\\\"a_1\\\" data-bind=\\\"checkedList\\\" name={'a'}/>,  \\n           &#x3C;input type=\\\"checkbox\\\" id=\\\"b_0\\\" data-bind=\\\"checkedList\\\" name={'b'}/>,  \\n         )}  \\n         &#x3C;input id=\\\"test\\\" data-bind=\\\"value\\\"/>  \\n       &#x3C;/div>  \\n     )  \\n   }  \\n }  </code></pre>\\n<p>Returns <strong>Bindable</strong>  </p>\\n<h2 id=\\\"binding\\\"><a href=\\\"#binding\\\" aria-hidden=\\\"true\\\"><span class=\\\"icon icon-link\\\"></span></a>binding</h2>\\n<p><a href=\\\"https://github.com/be-fe/react-mobx-vm/blob/2138b241540679e784e641a40781b5fdec56fd37/src/decorator/binding/index.js#L175-L217\\\" title=\\\"Source code on GitHub\\\">src/decorator/binding/index.js:175-217</a>  </p>\\n<p>简易的双向绑定写法，默认绑定 <code>value/onChange</code> 的一个闭环  </p>\\n<p><strong>Examples</strong>  </p>\\n<pre><code class=\\\"hljs language-javascript\\\" data-query=\\\"{}\\\" data-lang=\\\"javascript\\\">@bindView(View)  \\n<span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">Model</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">Root</span> </span>{  \\n   @observable abc = <span class=\\\"hljs-string\\\">'123'</span>  \\n}  \\n<span class=\\\"hljs-comment\\\">// 一劳永逸的用法  </span>\\n@binding  \\n<span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">View</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">React</span>.<span class=\\\"hljs-title\\\">Component</span> </span>{  \\n   render() {  \\n     <span class=\\\"hljs-keyword\\\">return</span> (  \\n       <span class=\\\"xml\\\"><span class=\\\"hljs-tag\\\">&#x3C;<span class=\\\"hljs-name\\\">div</span>></span>  \\n         </span>&#x3C;input data-bind=\\\"abc\\\" />  \\n       &#x3C;/div><span class=\\\"xml\\\">  \\n     )  \\n   }  \\n}  \\n  \\nclass View extends React.Component {  \\n   // 在成员方法里面修饰  \\n   @binding  \\n   renderSomething() {  \\n     // return ...  \\n   }  \\n   // 在getter方法里面修饰  \\n   @binding  \\n   get Something() {  \\n     // return ...  \\n   }  \\n   render() {  \\n     // 或者绑定指定的 react-element  \\n     return (  \\n       </span>&#x3C;div>  \\n         {binding(this.local)(  \\n           &#x3C;input data-bind=\\\"abc\\\" />  \\n         )}  \\n         // 或者直接传入 element  \\n         // 注意：需要绑定 `data-scope` 作用域  \\n         {binding(&#x3C;input data-bind=\\\"abc\\\" data-scope={this.local} />)}  \\n       &#x3C;/div>  \\n     )  \\n   }  \\n}  </code></pre>\\n<h2 id=\\\"bindview\\\"><a href=\\\"#bindview\\\" aria-hidden=\\\"true\\\"><span class=\\\"icon icon-link\\\"></span></a>bindView</h2>\\n<p><a href=\\\"https://github.com/be-fe/react-mobx-vm/blob/2138b241540679e784e641a40781b5fdec56fd37/src/decorator/bindView.js#L38-L60\\\" title=\\\"Source code on GitHub\\\">src/decorator/bindView.js:38-60</a>  </p>\\n<p>用于绑定 ViewModel 中与 Model 中对应的 View  </p>\\n<p><strong>Parameters</strong>  </p>\\n<ul>\\n<li>\\n<p><code>View</code> <strong>(<a href=\\\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\\\">Function</a> | ReactClass)</strong>  </p>\\n</li>\\n</ul>\\n<p><strong>Examples</strong>  </p>\\n<pre><code class=\\\"hljs language-javascript\\\" data-query=\\\"{}\\\" data-lang=\\\"javascript\\\"><span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">View</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">React</span>.<span class=\\\"hljs-title\\\">Component</span> </span>{  \\n   render() {  \\n     <span class=\\\"hljs-keyword\\\">this</span>.local.abc === <span class=\\\"hljs-string\\\">'abc'</span> <span class=\\\"hljs-comment\\\">// true  </span>\\n     <span class=\\\"hljs-keyword\\\">this</span>.local.cde === <span class=\\\"hljs-string\\\">'cde'</span> <span class=\\\"hljs-comment\\\">// true  </span>\\n   }  \\n}  \\n@bindView(View)  \\n<span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">Model</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">Root</span> </span>{  \\n   @observable abc = <span class=\\\"hljs-string\\\">'abc'</span>  \\n   cde = <span class=\\\"hljs-string\\\">'cde'</span>  \\n   <span class=\\\"hljs-comment\\\">// ...  </span>\\n}  </code></pre>\\n<p>Returns <strong><a href=\\\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\\\">function</a></strong> Model => BindedViewModel  </p>\\n<h2 id=\\\"collect\\\"><a href=\\\"#collect\\\" aria-hidden=\\\"true\\\"><span class=\\\"icon icon-link\\\"></span></a>collect</h2>\\n<p><a href=\\\"https://github.com/be-fe/react-mobx-vm/blob/2138b241540679e784e641a40781b5fdec56fd37/src/decorator/collect.js#L77-L126\\\" title=\\\"Source code on GitHub\\\">src/decorator/collect.js:77-126</a>  </p>\\n<p>收集全局 Store 的数据，一般在需要修改其他页面数据的时候使用；<br>\\n并且在使用了 webpack <strong>异步加载VM</strong>，搭配 <code>collect</code> 使用。  </p>\\n<ol>\\n<li>\\n<p>支持直接调用 <code>const someVM = await collect(this.app.someVM)</code>  </p>\\n</li>\\n<li>\\n<p>支持修饰器形式调用  </p>\\n</li>\\n</ol>\\n<p><strong>Parameters</strong>  </p>\\n<ul>\\n<li>\\n<p><code>paths</code> <strong>...<a href=\\\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\\\">string</a></strong>  </p>\\n</li>\\n</ul>\\n<p><strong>Examples</strong>  </p>\\n<p><em>app.js</em>  </p>\\n<pre><code class=\\\"hljs language-javascript\\\" data-query=\\\"{}\\\" data-lang=\\\"javascript\\\">@bindView(ContainerView)  \\n<span class=\\\"hljs-keyword\\\">export</span> <span class=\\\"hljs-keyword\\\">default</span> <span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">App</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">Root</span> </span>{  \\n   <span class=\\\"hljs-comment\\\">// 懒加载，代码分割  </span>\\n   editVM = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">()</span> =></span> <span class=\\\"hljs-keyword\\\">new</span> Primise(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">resolve</span> =></span> {  \\n     <span class=\\\"hljs-built_in\\\">require</span>.ensure([], () => resolve(<span class=\\\"hljs-built_in\\\">require</span>(<span class=\\\"hljs-string\\\">'./editVM'</span>)))  \\n   })  \\n   viewVM = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">()</span> =></span> <span class=\\\"hljs-keyword\\\">new</span> Primise(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">resolve</span> =></span> {  \\n     <span class=\\\"hljs-built_in\\\">require</span>.ensure([], () => resolve(<span class=\\\"hljs-built_in\\\">require</span>(<span class=\\\"hljs-string\\\">'./viewVM'</span>)))  \\n   })  \\n}  </code></pre>\\n<p><em>routes.js</em>  </p>\\n<pre><code class=\\\"hljs language-javascript\\\" data-query=\\\"{}\\\" data-lang=\\\"javascript\\\"><span class=\\\"hljs-keyword\\\">export</span> <span class=\\\"hljs-keyword\\\">default</span> {  \\n   <span class=\\\"hljs-attr\\\">path</span>: <span class=\\\"hljs-string\\\">'/'</span>,  \\n   <span class=\\\"hljs-attr\\\">component</span>: app,  \\n   <span class=\\\"hljs-attr\\\">indexRoute</span>: {  \\n     <span class=\\\"hljs-attr\\\">getComponent</span>: app.editVM  \\n   },  \\n   <span class=\\\"hljs-attr\\\">childRoutes</span>: [  \\n     {  \\n       <span class=\\\"hljs-attr\\\">path</span>: <span class=\\\"hljs-string\\\">'view'</span>,  \\n       <span class=\\\"hljs-attr\\\">getComponent</span>: app.viewVM  \\n     }  \\n   ]  \\n}  </code></pre>\\n<p><em>View.js</em>  </p>\\n<pre><code class=\\\"hljs language-javascript\\\" data-query=\\\"{}\\\" data-lang=\\\"javascript\\\">@collect(<span class=\\\"hljs-string\\\">'editVM'</span>, <span class=\\\"hljs-string\\\">'viewVM'</span>)  \\n<span class=\\\"hljs-keyword\\\">export</span> <span class=\\\"hljs-keyword\\\">default</span> <span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">View</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">React</span>.<span class=\\\"hljs-title\\\">Component</span> </span>{  \\n   render() {  \\n     <span class=\\\"hljs-comment\\\">// 在这可以直接使用  </span>\\n     <span class=\\\"hljs-comment\\\">// this.app.editVM  </span>\\n     <span class=\\\"hljs-comment\\\">// this.app.viewVM  </span>\\n   }  \\n  \\n   <span class=\\\"hljs-comment\\\">// 在下面的生命周期中，不能直接使用  </span>\\n   <span class=\\\"hljs-comment\\\">// 需要 await collect(this.app.editVM) 来异步使用  </span>\\n   <span class=\\\"hljs-keyword\\\">constructor</span>() {}  \\n   componentDidMount() {}  \\n   componentWillMount() {}  \\n}  </code></pre>\\n<h2 id=\\\"default_options\\\"><a href=\\\"#default_options\\\" aria-hidden=\\\"true\\\"><span class=\\\"icon icon-link\\\"></span></a>DEFAULT_OPTIONS</h2>\\n<p><a href=\\\"https://github.com/be-fe/react-mobx-vm/blob/2138b241540679e784e641a40781b5fdec56fd37/src/decorator/binding/bindable.js#L62-L69\\\" title=\\\"Source code on GitHub\\\">src/decorator/binding/bindable.js:62-69</a>  </p>\\n<ul>\\n<li>\\n<p><strong>See: <a href=\\\"#bindable\\\">bindable</a></strong>  </p>\\n</li>\\n</ul>\\n<p>如果你需要写一些自定义的 bindable 规则，可能你需要用到默认的配置  </p>\\n<h2 id=\\\"inject\\\"><a href=\\\"#inject\\\" aria-hidden=\\\"true\\\"><span class=\\\"icon icon-link\\\"></span></a>inject</h2>\\n<p><a href=\\\"https://github.com/be-fe/react-mobx-vm/blob/2138b241540679e784e641a40781b5fdec56fd37/src/decorator/injectInverseInherit.js#L52-L66\\\" title=\\\"Source code on GitHub\\\">src/decorator/injectInverseInherit.js:52-66</a>  </p>\\n<p>视图上注入全局 store  </p>\\n<p><strong>Parameters</strong>  </p>\\n<ul>\\n<li>\\n<p><code>props</code> <strong>...<a href=\\\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\\\">string</a></strong>  (optional, default <code>['app']</code>)  </p>\\n</li>\\n</ul>\\n<p><strong>Examples</strong>  </p>\\n<pre><code class=\\\"hljs language-javascript\\\" data-query=\\\"{}\\\" data-lang=\\\"javascript\\\">@inject  \\n<span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">View</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">React</span>.<span class=\\\"hljs-title\\\">Component</span> </span>{  \\n   render() {  \\n     <span class=\\\"hljs-comment\\\">// this.app  </span>\\n   }  \\n}  </code></pre>\\n<p>Returns <strong><a href=\\\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\\\">function</a></strong> (ReactComponent) => InjectedComponent  </p>\\n<h2 id=\\\"injectext\\\"><a href=\\\"#injectext\\\" aria-hidden=\\\"true\\\"><span class=\\\"icon icon-link\\\"></span></a>injectExt</h2>\\n<p><a href=\\\"https://github.com/be-fe/react-mobx-vm/blob/2138b241540679e784e641a40781b5fdec56fd37/src/decorator/injectExt.js#L28-L48\\\" title=\\\"Source code on GitHub\\\">src/decorator/injectExt.js:28-48</a>  </p>\\n<p>注入全局 store，并且可以进行一些额外操作.  </p>\\n<p><strong>Parameters</strong>  </p>\\n<ul>\\n<li>\\n<p><code>name</code> <strong><a href=\\\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\\\">string</a></strong>  (optional, default <code>'app'</code>)  </p>\\n</li>\\n<li>\\n<p><code>action</code> <strong><a href=\\\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\\\">function</a></strong>  </p>\\n</li>\\n</ul>\\n<p><strong>Examples</strong>  </p>\\n<pre><code class=\\\"hljs language-javascript\\\" data-query=\\\"{}\\\" data-lang=\\\"javascript\\\">@injectExt(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">app</span> =></span> {  \\n  <span class=\\\"hljs-comment\\\">// some action here  </span>\\n})  \\n<span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">View</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">React</span>.<span class=\\\"hljs-title\\\">Component</span> </span>{  \\n   render() {  \\n     <span class=\\\"hljs-comment\\\">// this.app  </span>\\n   }  \\n}  </code></pre>\\n<p>Returns <strong><a href=\\\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\\\">function</a></strong> (ReactComponent) => InjectedComponent  </p>\\n<h2 id=\\\"isviewmodelcomponent\\\"><a href=\\\"#isviewmodelcomponent\\\" aria-hidden=\\\"true\\\"><span class=\\\"icon icon-link\\\"></span></a>isViewModelComponent</h2>\\n<p><a href=\\\"https://github.com/be-fe/react-mobx-vm/blob/2138b241540679e784e641a40781b5fdec56fd37/src/decorator/modelComp.js#L15-L17\\\" title=\\\"Source code on GitHub\\\">src/decorator/modelComp.js:15-17</a>  </p>\\n<p>判断React Class是否为 ViewModal Component  </p>\\n<p><strong>Parameters</strong>  </p>\\n<ul>\\n<li>\\n<p><code>Comp</code>  {ReactClass}  </p>\\n</li>\\n</ul>\\n<p>Returns <strong><a href=\\\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\\\">boolean</a></strong>  </p>\\n<h2 id=\\\"mapping\\\"><a href=\\\"#mapping\\\" aria-hidden=\\\"true\\\"><span class=\\\"icon icon-link\\\"></span></a>mapping</h2>\\n<p><a href=\\\"https://github.com/be-fe/react-mobx-vm/blob/2138b241540679e784e641a40781b5fdec56fd37/src/decorator/mapping.js#L56-L83\\\" title=\\\"Source code on GitHub\\\">src/decorator/mapping.js:56-83</a>  </p>\\n<p>将 View 层的 props 同步映射至 model  </p>\\n<p><strong>Parameters</strong>  </p>\\n<ul>\\n<li>\\n<p><code>mapper</code>  {[mapper] | {propName, modelName: string} | string}  </p>\\n</li>\\n</ul>\\n<p><strong>Examples</strong>  </p>\\n<pre><code class=\\\"hljs language-javascript\\\" data-query=\\\"{}\\\" data-lang=\\\"javascript\\\">@mapping([<span class=\\\"hljs-string\\\">'abc.d'</span>, { <span class=\\\"hljs-string\\\">'prop'</span>: <span class=\\\"hljs-string\\\">'model'</span> }])  \\n<span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">View</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">React</span>.<span class=\\\"hljs-title\\\">Component</span> </span>{  \\n   render() {  \\n     <span class=\\\"hljs-comment\\\">// this.local.abc.d === this.props.abc.d  </span>\\n     <span class=\\\"hljs-comment\\\">// this.local.model === this.props.prop  </span>\\n   }  \\n}  </code></pre>\\n<p>Returns <strong><a href=\\\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\\\">function</a></strong> View => MappingView  </p>\\n<h2 id=\\\"reactautorun\\\"><a href=\\\"#reactautorun\\\" aria-hidden=\\\"true\\\"><span class=\\\"icon icon-link\\\"></span></a>reactAutorun</h2>\\n<p><a href=\\\"https://github.com/be-fe/react-mobx-vm/blob/2138b241540679e784e641a40781b5fdec56fd37/src/decorator/autorun/react.js#L10-L14\\\" title=\\\"Source code on GitHub\\\">src/decorator/autorun/react.js:10-14</a>  </p>\\n<p>发生改变之后，将会触发该成员方法  </p>\\n<p><strong>Examples</strong>  </p>\\n<pre><code class=\\\"hljs language-javascript\\\" data-query=\\\"{}\\\" data-lang=\\\"javascript\\\"><span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">View</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">React</span>.<span class=\\\"hljs-title\\\">Component</span> </span>{  \\n   @observable val = <span class=\\\"hljs-string\\\">'123'</span>  \\n   @observable deep = { <span class=\\\"hljs-attr\\\">key</span>: <span class=\\\"hljs-string\\\">'123'</span> }  \\n  \\n   @autorun  \\n   autorunMethod(dispose) {  \\n     <span class=\\\"hljs-comment\\\">// 当 `this.val`  </span>\\n     <span class=\\\"hljs-comment\\\">// 发生改变之后，将会触发该方法  </span>\\n     <span class=\\\"hljs-built_in\\\">console</span>.log(<span class=\\\"hljs-keyword\\\">this</span>.val)  \\n     <span class=\\\"hljs-comment\\\">// 调用 dispose 则会销毁掉该监听  </span>\\n     dispose &#x26;&#x26; dispose()  \\n   }  \\n}  </code></pre>\\n<h2 id=\\\"reaction\\\"><a href=\\\"#reaction\\\" aria-hidden=\\\"true\\\"><span class=\\\"icon icon-link\\\"></span></a>reaction</h2>\\n<p><a href=\\\"https://github.com/be-fe/react-mobx-vm/blob/2138b241540679e784e641a40781b5fdec56fd37/src/decorator/reaction/index.js#L30-L33\\\" title=\\\"Source code on GitHub\\\">src/decorator/reaction/index.js:30-33</a>  </p>\\n<p>发生改变之后，将会触发该成员方法  </p>\\n<p><strong>Examples</strong>  </p>\\n<pre><code class=\\\"hljs language-javascript\\\" data-query=\\\"{}\\\" data-lang=\\\"javascript\\\">@bindView(View)  \\n<span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">Model</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">Root</span> </span>{  \\n   @observable val = <span class=\\\"hljs-string\\\">'123'</span>  \\n   @observable deep = { <span class=\\\"hljs-attr\\\">key</span>: <span class=\\\"hljs-string\\\">'123'</span> }  \\n  \\n   @reaction(<span class=\\\"hljs-string\\\">'val'</span>, <span class=\\\"hljs-string\\\">'deep.key'</span>)  \\n   reactionMethod(val, deepKey, dispose) {  \\n     <span class=\\\"hljs-comment\\\">// 当 `this.val` `this.deep.key`  </span>\\n     <span class=\\\"hljs-comment\\\">// 发生改变之后，将会触发该方法  </span>\\n     <span class=\\\"hljs-comment\\\">// 与`autorun`不同的是，它第一次不会被触发  </span>\\n  \\n     <span class=\\\"hljs-comment\\\">// 调用 dispose 则会销毁掉该监听  </span>\\n     dispose &#x26;&#x26; dispose()  \\n   }  \\n}  </code></pre>\\n<h2 id=\\\"reactreaction\\\"><a href=\\\"#reactreaction\\\" aria-hidden=\\\"true\\\"><span class=\\\"icon icon-link\\\"></span></a>reactReaction</h2>\\n<p><a href=\\\"https://github.com/be-fe/react-mobx-vm/blob/2138b241540679e784e641a40781b5fdec56fd37/src/decorator/reaction/react.js#L29-L32\\\" title=\\\"Source code on GitHub\\\">src/decorator/reaction/react.js:29-32</a>  </p>\\n<p>发生改变之后，将会触发该成员方法  </p>\\n<p><strong>Examples</strong>  </p>\\n<pre><code class=\\\"hljs language-javascript\\\" data-query=\\\"{}\\\" data-lang=\\\"javascript\\\"><span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">View</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">React</span>.<span class=\\\"hljs-title\\\">Component</span> </span>{  \\n   @observable val = <span class=\\\"hljs-string\\\">'123'</span>  \\n   @observable deep = { <span class=\\\"hljs-attr\\\">key</span>: <span class=\\\"hljs-string\\\">'123'</span> }  \\n  \\n   @reaction(<span class=\\\"hljs-string\\\">'val'</span>, <span class=\\\"hljs-string\\\">'deep.key'</span>)  \\n   reactionMethod(val, deepKey, dispose) {  \\n     <span class=\\\"hljs-comment\\\">// 当 `this.val` `this.deep.key`  </span>\\n     <span class=\\\"hljs-comment\\\">// 发生改变之后，将会触发该方法  </span>\\n     <span class=\\\"hljs-comment\\\">// 与`autorun`不同的是，它第一次不会被触发  </span>\\n  \\n     <span class=\\\"hljs-comment\\\">// 调用 dispose 则会销毁掉该监听  </span>\\n     dispose &#x26;&#x26; dispose()  \\n   }  \\n}  </code></pre>\\n<h2 id=\\\"reactstoragesync\\\"><a href=\\\"#reactstoragesync\\\" aria-hidden=\\\"true\\\"><span class=\\\"icon icon-link\\\"></span></a>reactStorageSync</h2>\\n<p><a href=\\\"https://github.com/be-fe/react-mobx-vm/blob/2138b241540679e784e641a40781b5fdec56fd37/src/decorator/storageSync/react.js#L11-L15\\\" title=\\\"Source code on GitHub\\\">src/decorator/storageSync/react.js:11-15</a>  </p>\\n<p>View 层的数据（localStorage）存储同步  </p>\\n<p><strong>Parameters</strong>  </p>\\n<ul>\\n<li>\\n<p><code>storageKey</code>  {string} (optional, default <code>property</code>)  </p>\\n</li>\\n<li>\\n<p><code>options</code>  {string} 参考<a href=\\\"#reacturlsync\\\">reactUrlSync</a>  </p>\\n</li>\\n</ul>\\n<h2 id=\\\"reacturlsync\\\"><a href=\\\"#reacturlsync\\\" aria-hidden=\\\"true\\\"><span class=\\\"icon icon-link\\\"></span></a>reactUrlSync</h2>\\n<p><a href=\\\"https://github.com/be-fe/react-mobx-vm/blob/2138b241540679e784e641a40781b5fdec56fd37/src/decorator/urlSync/react.js#L11-L15\\\" title=\\\"Source code on GitHub\\\">src/decorator/urlSync/react.js:11-15</a>  </p>\\n<p>用于同步状态至 URL，不同于 <a href=\\\"#urlsync\\\"><code>urlSync</code></a> 的地方是，<code>reactUrlSync</code> 用于 react 视图层  </p>\\n<p><strong>Parameters</strong>  </p>\\n<ul>\\n<li>\\n<p><code>urlKey</code>  {string} - 状态对应URL上的 key (optional, default <code>property</code>)  </p>\\n</li>\\n<li>\\n<p><code>options</code>  {Object} - 选项  </p>\\n<ul>\\n<li><code>options.initialWrite</code>  {boolean}<br>\\n是否在第一次加载时候，将状态值写至 URL (optional, default <code>false</code>)  </li>\\n</ul>\\n</li>\\n</ul>\\n<p><strong>Examples</strong>  </p>\\n<pre><code class=\\\"hljs language-javascript\\\" data-query=\\\"{}\\\" data-lang=\\\"javascript\\\"><span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">View</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">React</span>.<span class=\\\"hljs-title\\\">Component</span> </span>{  \\n     @reactUrlSync  \\n     @observable sync = <span class=\\\"hljs-string\\\">'abc'</span>  \\n }  </code></pre>\\n<h2 id=\\\"registerurlsync\\\"><a href=\\\"#registerurlsync\\\" aria-hidden=\\\"true\\\"><span class=\\\"icon icon-link\\\"></span></a>registerUrlSync</h2>\\n<p><a href=\\\"https://github.com/be-fe/react-mobx-vm/blob/2138b241540679e784e641a40781b5fdec56fd37/src/decorator/urlSync/core.js#L39-L41\\\" title=\\\"Source code on GitHub\\\">src/decorator/urlSync/core.js:39-41</a>  </p>\\n<p><strong>Parameters</strong>  </p>\\n<ul>\\n<li>\\n<p><code>history</code> <strong>RouterHistory</strong> <a href=\\\"https://github.com/ReactTraining/react-router/blob/master/packages/react-router/docs/api/history.md\\\">See more information</a>  </p>\\n</li>\\n</ul>\\n<p><strong>Examples</strong>  </p>\\n<pre><code class=\\\"hljs language-javascript\\\" data-query=\\\"{}\\\" data-lang=\\\"javascript\\\"><span class=\\\"hljs-keyword\\\">import</span> { hashHistory, Router } <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-string\\\">'react-router'</span>  \\nregisterUrlSync(hashHistory)  \\n  \\n&#x3C;Router routes={routes} history={hashHistory} />  </code></pre>\\n<h2 id=\\\"stateinout\\\"><a href=\\\"#stateinout\\\" aria-hidden=\\\"true\\\"><span class=\\\"icon icon-link\\\"></span></a>stateInOut</h2>\\n<p><a href=\\\"https://github.com/be-fe/react-mobx-vm/blob/2138b241540679e784e641a40781b5fdec56fd37/src/decorator/stateInOut.js#L25-L80\\\" title=\\\"Source code on GitHub\\\">src/decorator/stateInOut.js:25-80</a>  </p>\\n<p>绑定 Model 至 View 中，将会挂载一些 View 的<a href=\\\"/advanced/life-cycle\\\">生命周期</a>至 Model 中  </p>\\n<p><strong>Parameters</strong>  </p>\\n<ul>\\n<li>\\n<p><code>StateClass</code> <strong><a href=\\\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\\\">function</a></strong>  </p>\\n</li>\\n<li>\\n<p><code>keyName</code> <strong><a href=\\\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\\\">string</a></strong>  (optional, default <code>'local'</code>)  </p>\\n</li>\\n<li>\\n<p><code>initData</code> <strong><a href=\\\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\\\">object</a></strong>  (optional, default <code>{}</code>)  </p>\\n</li>\\n</ul>\\n<p><strong>Examples</strong>  </p>\\n<pre><code class=\\\"hljs language-javascript\\\" data-query=\\\"{}\\\" data-lang=\\\"javascript\\\">@stateInOut(StateClass)  \\n<span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">View</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">React</span>.<span class=\\\"hljs-title\\\">Component</span> </span>{  \\n   render() {  \\n     <span class=\\\"hljs-comment\\\">// this.local 可以访问 StateClass 的实例  </span>\\n   }  \\n}  </code></pre>\\n<p>Returns <strong><a href=\\\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\\\">function</a></strong> View => View  </p>\\n<h2 id=\\\"stateless\\\"><a href=\\\"#stateless\\\" aria-hidden=\\\"true\\\"><span class=\\\"icon icon-link\\\"></span></a>stateless</h2>\\n<p><a href=\\\"https://github.com/be-fe/react-mobx-vm/blob/2138b241540679e784e641a40781b5fdec56fd37/src/decorator/stateless.js#L19-L23\\\" title=\\\"Source code on GitHub\\\">src/decorator/stateless.js:19-23</a>  </p>\\n<p>用于书写一些无组件自身状态的简单组件  </p>\\n<p><strong>Parameters</strong>  </p>\\n<ul>\\n<li>\\n<p><code>func</code>  {function} (local, props) => ReactElement  </p>\\n</li>\\n<li>\\n<p><code>localKey</code>  {string} (optional, default <code>'local'</code>)  </p>\\n</li>\\n</ul>\\n<p><strong>Examples</strong>  </p>\\n<pre><code class=\\\"hljs language-javascript\\\" data-query=\\\"{}\\\" data-lang=\\\"javascript\\\"><span class=\\\"hljs-keyword\\\">export</span> <span class=\\\"hljs-keyword\\\">default</span> stateless(<span class=\\\"hljs-function\\\">(<span class=\\\"hljs-params\\\">local, props</span>) =></span>  \\n  &#x3C;div><span class=\\\"xml\\\"><span class=\\\"hljs-tag\\\">&#x3C;/<span class=\\\"hljs-name\\\">div</span>></span></span>  \\n)  </code></pre>\\n<p>Returns <strong><a href=\\\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\\\">function</a></strong> props => ReactElement  </p>\\n<h2 id=\\\"storagesync\\\"><a href=\\\"#storagesync\\\" aria-hidden=\\\"true\\\"><span class=\\\"icon icon-link\\\"></span></a>storageSync</h2>\\n<p><a href=\\\"https://github.com/be-fe/react-mobx-vm/blob/2138b241540679e784e641a40781b5fdec56fd37/src/decorator/storageSync/state.js#L11-L15\\\" title=\\\"Source code on GitHub\\\">src/decorator/storageSync/state.js:11-15</a>  </p>\\n<p>Model层的数据（localStorage）存储同步  </p>\\n<p><strong>Parameters</strong>  </p>\\n<ul>\\n<li>\\n<p><code>storageKey</code>  {string} (optional, default <code>property</code>)  </p>\\n</li>\\n<li>\\n<p><code>options</code>  {string} 参考<a href=\\\"#reacturlsync\\\">reactUrlSync</a>  </p>\\n</li>\\n</ul>\\n<p><strong>Examples</strong>  </p>\\n<pre><code class=\\\"hljs language-javascript\\\" data-query=\\\"{}\\\" data-lang=\\\"javascript\\\"><span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">Model</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">Root</span> </span>{  \\n   @storageSync  \\n   @observable data = { <span class=\\\"hljs-attr\\\">arr</span>: [<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-number\\\">3</span>] }  \\n}  \\n<span class=\\\"hljs-comment\\\">// 在修改了 `model.data` 之后，查看 `localStorage` 中的数据  </span></code></pre>\\n<h2 id=\\\"urlsync\\\"><a href=\\\"#urlsync\\\" aria-hidden=\\\"true\\\"><span class=\\\"icon icon-link\\\"></span></a>urlSync</h2>\\n<p><a href=\\\"https://github.com/be-fe/react-mobx-vm/blob/2138b241540679e784e641a40781b5fdec56fd37/src/decorator/urlSync/state.js#L11-L15\\\" title=\\\"Source code on GitHub\\\">src/decorator/urlSync/state.js:11-15</a>  </p>\\n<p>用于同步状态至 URL  </p>\\n<p><strong>Examples</strong>  </p>\\n<pre><code class=\\\"hljs language-javascript\\\" data-query=\\\"{}\\\" data-lang=\\\"javascript\\\"><span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">Model</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">Root</span> </span>{  \\n  @urlSync  \\n  @observable sync = <span class=\\\"hljs-string\\\">'abc'</span>  \\n  <span class=\\\"hljs-comment\\\">// 未使用 @observable 修饰, urlSync会自动将其转为 observable  </span>\\n  @urlSync(<span class=\\\"hljs-string\\\">'g'</span>)  \\n  value = <span class=\\\"hljs-string\\\">'abcdef'</span>  \\n}  </code></pre>\\n\",\n\t  \"extra\": {}\n\t}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// api/decorator.js","/*markdown-loader*/\nmodule.exports = {\n  \"content\": \"<div class=\\\"picidae-toc\\\">\\n<ul>\\n<li>\\n<a href=\\\"#autorun\\\">autorun</a>\\n</li>\\n<li>\\n<a href=\\\"#bindable\\\">bindable</a>\\n</li>\\n<li>\\n<a href=\\\"#binding\\\">binding</a>\\n</li>\\n<li>\\n<a href=\\\"#bindview\\\">bindView</a>\\n</li>\\n<li>\\n<a href=\\\"#collect\\\">collect</a>\\n</li>\\n<li>\\n<a href=\\\"#default_options\\\">DEFAULT_OPTIONS</a>\\n</li>\\n<li>\\n<a href=\\\"#inject\\\">inject</a>\\n</li>\\n<li>\\n<a href=\\\"#injectext\\\">injectExt</a>\\n</li>\\n<li>\\n<a href=\\\"#isviewmodelcomponent\\\">isViewModelComponent</a>\\n</li>\\n<li>\\n<a href=\\\"#mapping\\\">mapping</a>\\n</li>\\n<li>\\n<a href=\\\"#reactautorun\\\">reactAutorun</a>\\n</li>\\n<li>\\n<a href=\\\"#reaction\\\">reaction</a>\\n</li>\\n<li>\\n<a href=\\\"#reactreaction\\\">reactReaction</a>\\n</li>\\n<li>\\n<a href=\\\"#reactstoragesync\\\">reactStorageSync</a>\\n</li>\\n<li>\\n<a href=\\\"#reacturlsync\\\">reactUrlSync</a>\\n</li>\\n<li>\\n<a href=\\\"#registerurlsync\\\">registerUrlSync</a>\\n</li>\\n<li>\\n<a href=\\\"#stateinout\\\">stateInOut</a>\\n</li>\\n<li>\\n<a href=\\\"#stateless\\\">stateless</a>\\n</li>\\n<li>\\n<a href=\\\"#storagesync\\\">storageSync</a>\\n</li>\\n<li>\\n<a href=\\\"#urlsync\\\">urlSync</a>\\n</li>\\n</ul>\\n</div>\\n<hr>\\n<!-- Generated by documentation.js. Update this documentation by updating the source code. -->  \\n<h2 id=\\\"autorun\\\"><a href=\\\"#autorun\\\" aria-hidden=\\\"true\\\"><span class=\\\"icon icon-link\\\"></span></a>autorun</h2>\\n<p><a href=\\\"https://github.com/be-fe/react-mobx-vm/blob/2138b241540679e784e641a40781b5fdec56fd37/src/decorator/autorun/index.js#L33-L38\\\" title=\\\"Source code on GitHub\\\">src/decorator/autorun/index.js:33-38</a>  </p>\\n<p>监听数据发生改变之后，将会触发该成员方法，不同于 reaction  </p>\\n<p><strong>Examples</strong>  </p>\\n<pre><code class=\\\"hljs language-javascript\\\" data-query=\\\"{}\\\" data-lang=\\\"javascript\\\">@bindView(View)  \\n<span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">Model</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">Root</span> </span>{  \\n   @observable val = <span class=\\\"hljs-string\\\">'123'</span>  \\n   @observable deep = { <span class=\\\"hljs-attr\\\">key</span>: <span class=\\\"hljs-string\\\">'123'</span> }  \\n  \\n   @autorun  \\n   autorunMethod(dispose) {  \\n     <span class=\\\"hljs-comment\\\">// 当 `this.val`  </span>\\n     <span class=\\\"hljs-comment\\\">// 发生改变之后，将会触发该方法  </span>\\n     <span class=\\\"hljs-comment\\\">// 与`reaction`不同的是，它第一次初始化时会被触发  </span>\\n     <span class=\\\"hljs-built_in\\\">console</span>.log(<span class=\\\"hljs-keyword\\\">this</span>.val)  \\n     <span class=\\\"hljs-comment\\\">// 调用 dispose 则会销毁掉该监听  </span>\\n     dispose &#x26;&#x26; dispose()  \\n   }  \\n}  </code></pre>\\n<h2 id=\\\"bindable\\\"><a href=\\\"#bindable\\\" aria-hidden=\\\"true\\\"><span class=\\\"icon icon-link\\\"></span></a>bindable</h2>\\n<p><a href=\\\"https://github.com/be-fe/react-mobx-vm/blob/2138b241540679e784e641a40781b5fdec56fd37/src/decorator/binding/bindable.js#L201-L222\\\" title=\\\"Source code on GitHub\\\">src/decorator/binding/bindable.js:201-222</a>  </p>\\n<ul>\\n<li>\\n<p><strong>See: <a href=\\\"/examples/binding#bindable\\\">examples/binding#bindable</a></strong>  </p>\\n</li>\\n</ul>\\n<p>搭配<a href=\\\"#binding\\\">binding</a>使用，可以定义自己的 binding 规则  </p>\\n<p><strong>Parameters</strong>  </p>\\n<ul>\\n<li>\\n<p><code>options</code>  {object} (optional, default <code>DEFAULT_OPTIONS</code>)  </p>\\n<ul>\\n<li><code>options.cond</code>  {function} props => boolean<br>\\n是否匹配上 (optional, default <code>null</code>)  </li>\\n<li><code>options.prop</code>  {[[propName: string, transform: function] | string]}<br>\\n需要绑定的属性定义，可以通过 transform 进行转换 (optional, default <code>['value']</code>)  </li>\\n<li><code>options.event</code>  {[[propName: string, handler: function] | string]}<br>\\n需要绑定的属性定义，可以通过 transform 进行转换 (optional, default <code>['onChange']</code>)  </li>\\n</ul>\\n</li>\\n<li>\\n<p><code>tagName</code>  {String | ReactComponent}<br>\\n被绑定的组件，可以为 HTML标签名 或 ReactComponent  </p>\\n</li>\\n</ul>\\n<p><strong>Examples</strong>  </p>\\n<pre><code class=\\\"hljs language-javascript\\\" data-query=\\\"{}\\\" data-lang=\\\"javascript\\\">bindable([{  \\n   <span class=\\\"hljs-attr\\\">cond</span>: <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">props</span>) </span>{  \\n     <span class=\\\"hljs-keyword\\\">return</span> props.type === <span class=\\\"hljs-string\\\">'checkbox'</span>  \\n   },  \\n   <span class=\\\"hljs-attr\\\">prop</span>: [  \\n     [<span class=\\\"hljs-string\\\">'checked'</span>, <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">modelValue, propVal, props</span>) </span>{  \\n       <span class=\\\"hljs-keyword\\\">return</span> modelValue.includes(props.name)  \\n     }]  \\n   ],  \\n   <span class=\\\"hljs-attr\\\">event</span>: [  \\n     [<span class=\\\"hljs-string\\\">'onChange'</span>, <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">[evt], ctx</span>) </span>{  \\n       <span class=\\\"hljs-keyword\\\">const</span> { <span class=\\\"hljs-attr\\\">target</span>: { name, checked } } = evt  \\n       <span class=\\\"hljs-keyword\\\">const</span> list = ctx.get()  \\n       <span class=\\\"hljs-keyword\\\">let</span> i = list.indexOf(name)  \\n       i >= <span class=\\\"hljs-number\\\">0</span> &#x26;&#x26; list.splice(i, <span class=\\\"hljs-number\\\">1</span>)  \\n       <span class=\\\"hljs-keyword\\\">if</span> (checked) {  \\n         list.push(name)  \\n       }  \\n     }]  \\n   ]  \\n }].concat(DEFAULT_OPTIONS), <span class=\\\"hljs-string\\\">'input'</span>)  \\n  \\n <span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">Scope</span> </span>{  \\n   @observable value = <span class=\\\"hljs-string\\\">'val'</span>  \\n   @observable checkedList = []  \\n }  \\n <span class=\\\"hljs-keyword\\\">const</span> scope = <span class=\\\"hljs-keyword\\\">new</span> Scope  \\n  \\n @observer  \\n <span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">View</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">React</span>.<span class=\\\"hljs-title\\\">Component</span> </span>{  \\n   render() {  \\n     <span class=\\\"hljs-keyword\\\">return</span> (  \\n       <span class=\\\"xml\\\"><span class=\\\"hljs-tag\\\">&#x3C;<span class=\\\"hljs-name\\\">div</span>></span>  \\n         {binding(scope)(  \\n           </span>&#x3C;input type=\\\"text\\\" id=\\\"text\\\" data-bind=\\\"value\\\" data-scope={scope}/>,  \\n           &#x3C;input type=\\\"checkbox\\\" id=\\\"a_0\\\" data-bind=\\\"checkedList\\\" name={'a'}/>,  \\n           &#x3C;input type=\\\"checkbox\\\" id=\\\"a_1\\\" data-bind=\\\"checkedList\\\" name={'a'}/>,  \\n           &#x3C;input type=\\\"checkbox\\\" id=\\\"b_0\\\" data-bind=\\\"checkedList\\\" name={'b'}/>,  \\n         )}  \\n         &#x3C;input id=\\\"test\\\" data-bind=\\\"value\\\"/>  \\n       &#x3C;/div>  \\n     )  \\n   }  \\n }  </code></pre>\\n<p>Returns <strong>Bindable</strong>  </p>\\n<h2 id=\\\"binding\\\"><a href=\\\"#binding\\\" aria-hidden=\\\"true\\\"><span class=\\\"icon icon-link\\\"></span></a>binding</h2>\\n<p><a href=\\\"https://github.com/be-fe/react-mobx-vm/blob/2138b241540679e784e641a40781b5fdec56fd37/src/decorator/binding/index.js#L175-L217\\\" title=\\\"Source code on GitHub\\\">src/decorator/binding/index.js:175-217</a>  </p>\\n<p>简易的双向绑定写法，默认绑定 <code>value/onChange</code> 的一个闭环  </p>\\n<p><strong>Examples</strong>  </p>\\n<pre><code class=\\\"hljs language-javascript\\\" data-query=\\\"{}\\\" data-lang=\\\"javascript\\\">@bindView(View)  \\n<span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">Model</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">Root</span> </span>{  \\n   @observable abc = <span class=\\\"hljs-string\\\">'123'</span>  \\n}  \\n<span class=\\\"hljs-comment\\\">// 一劳永逸的用法  </span>\\n@binding  \\n<span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">View</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">React</span>.<span class=\\\"hljs-title\\\">Component</span> </span>{  \\n   render() {  \\n     <span class=\\\"hljs-keyword\\\">return</span> (  \\n       <span class=\\\"xml\\\"><span class=\\\"hljs-tag\\\">&#x3C;<span class=\\\"hljs-name\\\">div</span>></span>  \\n         </span>&#x3C;input data-bind=\\\"abc\\\" />  \\n       &#x3C;/div><span class=\\\"xml\\\">  \\n     )  \\n   }  \\n}  \\n  \\nclass View extends React.Component {  \\n   // 在成员方法里面修饰  \\n   @binding  \\n   renderSomething() {  \\n     // return ...  \\n   }  \\n   // 在getter方法里面修饰  \\n   @binding  \\n   get Something() {  \\n     // return ...  \\n   }  \\n   render() {  \\n     // 或者绑定指定的 react-element  \\n     return (  \\n       </span>&#x3C;div>  \\n         {binding(this.local)(  \\n           &#x3C;input data-bind=\\\"abc\\\" />  \\n         )}  \\n         // 或者直接传入 element  \\n         // 注意：需要绑定 `data-scope` 作用域  \\n         {binding(&#x3C;input data-bind=\\\"abc\\\" data-scope={this.local} />)}  \\n       &#x3C;/div>  \\n     )  \\n   }  \\n}  </code></pre>\\n<h2 id=\\\"bindview\\\"><a href=\\\"#bindview\\\" aria-hidden=\\\"true\\\"><span class=\\\"icon icon-link\\\"></span></a>bindView</h2>\\n<p><a href=\\\"https://github.com/be-fe/react-mobx-vm/blob/2138b241540679e784e641a40781b5fdec56fd37/src/decorator/bindView.js#L38-L60\\\" title=\\\"Source code on GitHub\\\">src/decorator/bindView.js:38-60</a>  </p>\\n<p>用于绑定 ViewModel 中与 Model 中对应的 View  </p>\\n<p><strong>Parameters</strong>  </p>\\n<ul>\\n<li>\\n<p><code>View</code> <strong>(<a href=\\\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\\\">Function</a> | ReactClass)</strong>  </p>\\n</li>\\n</ul>\\n<p><strong>Examples</strong>  </p>\\n<pre><code class=\\\"hljs language-javascript\\\" data-query=\\\"{}\\\" data-lang=\\\"javascript\\\"><span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">View</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">React</span>.<span class=\\\"hljs-title\\\">Component</span> </span>{  \\n   render() {  \\n     <span class=\\\"hljs-keyword\\\">this</span>.local.abc === <span class=\\\"hljs-string\\\">'abc'</span> <span class=\\\"hljs-comment\\\">// true  </span>\\n     <span class=\\\"hljs-keyword\\\">this</span>.local.cde === <span class=\\\"hljs-string\\\">'cde'</span> <span class=\\\"hljs-comment\\\">// true  </span>\\n   }  \\n}  \\n@bindView(View)  \\n<span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">Model</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">Root</span> </span>{  \\n   @observable abc = <span class=\\\"hljs-string\\\">'abc'</span>  \\n   cde = <span class=\\\"hljs-string\\\">'cde'</span>  \\n   <span class=\\\"hljs-comment\\\">// ...  </span>\\n}  </code></pre>\\n<p>Returns <strong><a href=\\\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\\\">function</a></strong> Model => BindedViewModel  </p>\\n<h2 id=\\\"collect\\\"><a href=\\\"#collect\\\" aria-hidden=\\\"true\\\"><span class=\\\"icon icon-link\\\"></span></a>collect</h2>\\n<p><a href=\\\"https://github.com/be-fe/react-mobx-vm/blob/2138b241540679e784e641a40781b5fdec56fd37/src/decorator/collect.js#L77-L126\\\" title=\\\"Source code on GitHub\\\">src/decorator/collect.js:77-126</a>  </p>\\n<p>收集全局 Store 的数据，一般在需要修改其他页面数据的时候使用；<br>\\n并且在使用了 webpack <strong>异步加载VM</strong>，搭配 <code>collect</code> 使用。  </p>\\n<ol>\\n<li>\\n<p>支持直接调用 <code>const someVM = await collect(this.app.someVM)</code>  </p>\\n</li>\\n<li>\\n<p>支持修饰器形式调用  </p>\\n</li>\\n</ol>\\n<p><strong>Parameters</strong>  </p>\\n<ul>\\n<li>\\n<p><code>paths</code> <strong>...<a href=\\\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\\\">string</a></strong>  </p>\\n</li>\\n</ul>\\n<p><strong>Examples</strong>  </p>\\n<p><em>app.js</em>  </p>\\n<pre><code class=\\\"hljs language-javascript\\\" data-query=\\\"{}\\\" data-lang=\\\"javascript\\\">@bindView(ContainerView)  \\n<span class=\\\"hljs-keyword\\\">export</span> <span class=\\\"hljs-keyword\\\">default</span> <span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">App</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">Root</span> </span>{  \\n   <span class=\\\"hljs-comment\\\">// 懒加载，代码分割  </span>\\n   editVM = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">()</span> =></span> <span class=\\\"hljs-keyword\\\">new</span> Primise(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">resolve</span> =></span> {  \\n     <span class=\\\"hljs-built_in\\\">require</span>.ensure([], () => resolve(<span class=\\\"hljs-built_in\\\">require</span>(<span class=\\\"hljs-string\\\">'./editVM'</span>)))  \\n   })  \\n   viewVM = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">()</span> =></span> <span class=\\\"hljs-keyword\\\">new</span> Primise(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">resolve</span> =></span> {  \\n     <span class=\\\"hljs-built_in\\\">require</span>.ensure([], () => resolve(<span class=\\\"hljs-built_in\\\">require</span>(<span class=\\\"hljs-string\\\">'./viewVM'</span>)))  \\n   })  \\n}  </code></pre>\\n<p><em>routes.js</em>  </p>\\n<pre><code class=\\\"hljs language-javascript\\\" data-query=\\\"{}\\\" data-lang=\\\"javascript\\\"><span class=\\\"hljs-keyword\\\">export</span> <span class=\\\"hljs-keyword\\\">default</span> {  \\n   <span class=\\\"hljs-attr\\\">path</span>: <span class=\\\"hljs-string\\\">'/'</span>,  \\n   <span class=\\\"hljs-attr\\\">component</span>: app,  \\n   <span class=\\\"hljs-attr\\\">indexRoute</span>: {  \\n     <span class=\\\"hljs-attr\\\">getComponent</span>: app.editVM  \\n   },  \\n   <span class=\\\"hljs-attr\\\">childRoutes</span>: [  \\n     {  \\n       <span class=\\\"hljs-attr\\\">path</span>: <span class=\\\"hljs-string\\\">'view'</span>,  \\n       <span class=\\\"hljs-attr\\\">getComponent</span>: app.viewVM  \\n     }  \\n   ]  \\n}  </code></pre>\\n<p><em>View.js</em>  </p>\\n<pre><code class=\\\"hljs language-javascript\\\" data-query=\\\"{}\\\" data-lang=\\\"javascript\\\">@collect(<span class=\\\"hljs-string\\\">'editVM'</span>, <span class=\\\"hljs-string\\\">'viewVM'</span>)  \\n<span class=\\\"hljs-keyword\\\">export</span> <span class=\\\"hljs-keyword\\\">default</span> <span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">View</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">React</span>.<span class=\\\"hljs-title\\\">Component</span> </span>{  \\n   render() {  \\n     <span class=\\\"hljs-comment\\\">// 在这可以直接使用  </span>\\n     <span class=\\\"hljs-comment\\\">// this.app.editVM  </span>\\n     <span class=\\\"hljs-comment\\\">// this.app.viewVM  </span>\\n   }  \\n  \\n   <span class=\\\"hljs-comment\\\">// 在下面的生命周期中，不能直接使用  </span>\\n   <span class=\\\"hljs-comment\\\">// 需要 await collect(this.app.editVM) 来异步使用  </span>\\n   <span class=\\\"hljs-keyword\\\">constructor</span>() {}  \\n   componentDidMount() {}  \\n   componentWillMount() {}  \\n}  </code></pre>\\n<h2 id=\\\"default_options\\\"><a href=\\\"#default_options\\\" aria-hidden=\\\"true\\\"><span class=\\\"icon icon-link\\\"></span></a>DEFAULT_OPTIONS</h2>\\n<p><a href=\\\"https://github.com/be-fe/react-mobx-vm/blob/2138b241540679e784e641a40781b5fdec56fd37/src/decorator/binding/bindable.js#L62-L69\\\" title=\\\"Source code on GitHub\\\">src/decorator/binding/bindable.js:62-69</a>  </p>\\n<ul>\\n<li>\\n<p><strong>See: <a href=\\\"#bindable\\\">bindable</a></strong>  </p>\\n</li>\\n</ul>\\n<p>如果你需要写一些自定义的 bindable 规则，可能你需要用到默认的配置  </p>\\n<h2 id=\\\"inject\\\"><a href=\\\"#inject\\\" aria-hidden=\\\"true\\\"><span class=\\\"icon icon-link\\\"></span></a>inject</h2>\\n<p><a href=\\\"https://github.com/be-fe/react-mobx-vm/blob/2138b241540679e784e641a40781b5fdec56fd37/src/decorator/injectInverseInherit.js#L52-L66\\\" title=\\\"Source code on GitHub\\\">src/decorator/injectInverseInherit.js:52-66</a>  </p>\\n<p>视图上注入全局 store  </p>\\n<p><strong>Parameters</strong>  </p>\\n<ul>\\n<li>\\n<p><code>props</code> <strong>...<a href=\\\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\\\">string</a></strong>  (optional, default <code>['app']</code>)  </p>\\n</li>\\n</ul>\\n<p><strong>Examples</strong>  </p>\\n<pre><code class=\\\"hljs language-javascript\\\" data-query=\\\"{}\\\" data-lang=\\\"javascript\\\">@inject  \\n<span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">View</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">React</span>.<span class=\\\"hljs-title\\\">Component</span> </span>{  \\n   render() {  \\n     <span class=\\\"hljs-comment\\\">// this.app  </span>\\n   }  \\n}  </code></pre>\\n<p>Returns <strong><a href=\\\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\\\">function</a></strong> (ReactComponent) => InjectedComponent  </p>\\n<h2 id=\\\"injectext\\\"><a href=\\\"#injectext\\\" aria-hidden=\\\"true\\\"><span class=\\\"icon icon-link\\\"></span></a>injectExt</h2>\\n<p><a href=\\\"https://github.com/be-fe/react-mobx-vm/blob/2138b241540679e784e641a40781b5fdec56fd37/src/decorator/injectExt.js#L28-L48\\\" title=\\\"Source code on GitHub\\\">src/decorator/injectExt.js:28-48</a>  </p>\\n<p>注入全局 store，并且可以进行一些额外操作.  </p>\\n<p><strong>Parameters</strong>  </p>\\n<ul>\\n<li>\\n<p><code>name</code> <strong><a href=\\\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\\\">string</a></strong>  (optional, default <code>'app'</code>)  </p>\\n</li>\\n<li>\\n<p><code>action</code> <strong><a href=\\\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\\\">function</a></strong>  </p>\\n</li>\\n</ul>\\n<p><strong>Examples</strong>  </p>\\n<pre><code class=\\\"hljs language-javascript\\\" data-query=\\\"{}\\\" data-lang=\\\"javascript\\\">@injectExt(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">app</span> =></span> {  \\n  <span class=\\\"hljs-comment\\\">// some action here  </span>\\n})  \\n<span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">View</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">React</span>.<span class=\\\"hljs-title\\\">Component</span> </span>{  \\n   render() {  \\n     <span class=\\\"hljs-comment\\\">// this.app  </span>\\n   }  \\n}  </code></pre>\\n<p>Returns <strong><a href=\\\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\\\">function</a></strong> (ReactComponent) => InjectedComponent  </p>\\n<h2 id=\\\"isviewmodelcomponent\\\"><a href=\\\"#isviewmodelcomponent\\\" aria-hidden=\\\"true\\\"><span class=\\\"icon icon-link\\\"></span></a>isViewModelComponent</h2>\\n<p><a href=\\\"https://github.com/be-fe/react-mobx-vm/blob/2138b241540679e784e641a40781b5fdec56fd37/src/decorator/modelComp.js#L15-L17\\\" title=\\\"Source code on GitHub\\\">src/decorator/modelComp.js:15-17</a>  </p>\\n<p>判断React Class是否为 ViewModal Component  </p>\\n<p><strong>Parameters</strong>  </p>\\n<ul>\\n<li>\\n<p><code>Comp</code>  {ReactClass}  </p>\\n</li>\\n</ul>\\n<p>Returns <strong><a href=\\\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\\\">boolean</a></strong>  </p>\\n<h2 id=\\\"mapping\\\"><a href=\\\"#mapping\\\" aria-hidden=\\\"true\\\"><span class=\\\"icon icon-link\\\"></span></a>mapping</h2>\\n<p><a href=\\\"https://github.com/be-fe/react-mobx-vm/blob/2138b241540679e784e641a40781b5fdec56fd37/src/decorator/mapping.js#L56-L83\\\" title=\\\"Source code on GitHub\\\">src/decorator/mapping.js:56-83</a>  </p>\\n<p>将 View 层的 props 同步映射至 model  </p>\\n<p><strong>Parameters</strong>  </p>\\n<ul>\\n<li>\\n<p><code>mapper</code>  {[mapper] | {propName, modelName: string} | string}  </p>\\n</li>\\n</ul>\\n<p><strong>Examples</strong>  </p>\\n<pre><code class=\\\"hljs language-javascript\\\" data-query=\\\"{}\\\" data-lang=\\\"javascript\\\">@mapping([<span class=\\\"hljs-string\\\">'abc.d'</span>, { <span class=\\\"hljs-string\\\">'prop'</span>: <span class=\\\"hljs-string\\\">'model'</span> }])  \\n<span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">View</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">React</span>.<span class=\\\"hljs-title\\\">Component</span> </span>{  \\n   render() {  \\n     <span class=\\\"hljs-comment\\\">// this.local.abc.d === this.props.abc.d  </span>\\n     <span class=\\\"hljs-comment\\\">// this.local.model === this.props.prop  </span>\\n   }  \\n}  </code></pre>\\n<p>Returns <strong><a href=\\\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\\\">function</a></strong> View => MappingView  </p>\\n<h2 id=\\\"reactautorun\\\"><a href=\\\"#reactautorun\\\" aria-hidden=\\\"true\\\"><span class=\\\"icon icon-link\\\"></span></a>reactAutorun</h2>\\n<p><a href=\\\"https://github.com/be-fe/react-mobx-vm/blob/2138b241540679e784e641a40781b5fdec56fd37/src/decorator/autorun/react.js#L10-L14\\\" title=\\\"Source code on GitHub\\\">src/decorator/autorun/react.js:10-14</a>  </p>\\n<p>发生改变之后，将会触发该成员方法  </p>\\n<p><strong>Examples</strong>  </p>\\n<pre><code class=\\\"hljs language-javascript\\\" data-query=\\\"{}\\\" data-lang=\\\"javascript\\\"><span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">View</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">React</span>.<span class=\\\"hljs-title\\\">Component</span> </span>{  \\n   @observable val = <span class=\\\"hljs-string\\\">'123'</span>  \\n   @observable deep = { <span class=\\\"hljs-attr\\\">key</span>: <span class=\\\"hljs-string\\\">'123'</span> }  \\n  \\n   @autorun  \\n   autorunMethod(dispose) {  \\n     <span class=\\\"hljs-comment\\\">// 当 `this.val`  </span>\\n     <span class=\\\"hljs-comment\\\">// 发生改变之后，将会触发该方法  </span>\\n     <span class=\\\"hljs-built_in\\\">console</span>.log(<span class=\\\"hljs-keyword\\\">this</span>.val)  \\n     <span class=\\\"hljs-comment\\\">// 调用 dispose 则会销毁掉该监听  </span>\\n     dispose &#x26;&#x26; dispose()  \\n   }  \\n}  </code></pre>\\n<h2 id=\\\"reaction\\\"><a href=\\\"#reaction\\\" aria-hidden=\\\"true\\\"><span class=\\\"icon icon-link\\\"></span></a>reaction</h2>\\n<p><a href=\\\"https://github.com/be-fe/react-mobx-vm/blob/2138b241540679e784e641a40781b5fdec56fd37/src/decorator/reaction/index.js#L30-L33\\\" title=\\\"Source code on GitHub\\\">src/decorator/reaction/index.js:30-33</a>  </p>\\n<p>发生改变之后，将会触发该成员方法  </p>\\n<p><strong>Examples</strong>  </p>\\n<pre><code class=\\\"hljs language-javascript\\\" data-query=\\\"{}\\\" data-lang=\\\"javascript\\\">@bindView(View)  \\n<span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">Model</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">Root</span> </span>{  \\n   @observable val = <span class=\\\"hljs-string\\\">'123'</span>  \\n   @observable deep = { <span class=\\\"hljs-attr\\\">key</span>: <span class=\\\"hljs-string\\\">'123'</span> }  \\n  \\n   @reaction(<span class=\\\"hljs-string\\\">'val'</span>, <span class=\\\"hljs-string\\\">'deep.key'</span>)  \\n   reactionMethod(val, deepKey, dispose) {  \\n     <span class=\\\"hljs-comment\\\">// 当 `this.val` `this.deep.key`  </span>\\n     <span class=\\\"hljs-comment\\\">// 发生改变之后，将会触发该方法  </span>\\n     <span class=\\\"hljs-comment\\\">// 与`autorun`不同的是，它第一次不会被触发  </span>\\n  \\n     <span class=\\\"hljs-comment\\\">// 调用 dispose 则会销毁掉该监听  </span>\\n     dispose &#x26;&#x26; dispose()  \\n   }  \\n}  </code></pre>\\n<h2 id=\\\"reactreaction\\\"><a href=\\\"#reactreaction\\\" aria-hidden=\\\"true\\\"><span class=\\\"icon icon-link\\\"></span></a>reactReaction</h2>\\n<p><a href=\\\"https://github.com/be-fe/react-mobx-vm/blob/2138b241540679e784e641a40781b5fdec56fd37/src/decorator/reaction/react.js#L29-L32\\\" title=\\\"Source code on GitHub\\\">src/decorator/reaction/react.js:29-32</a>  </p>\\n<p>发生改变之后，将会触发该成员方法  </p>\\n<p><strong>Examples</strong>  </p>\\n<pre><code class=\\\"hljs language-javascript\\\" data-query=\\\"{}\\\" data-lang=\\\"javascript\\\"><span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">View</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">React</span>.<span class=\\\"hljs-title\\\">Component</span> </span>{  \\n   @observable val = <span class=\\\"hljs-string\\\">'123'</span>  \\n   @observable deep = { <span class=\\\"hljs-attr\\\">key</span>: <span class=\\\"hljs-string\\\">'123'</span> }  \\n  \\n   @reaction(<span class=\\\"hljs-string\\\">'val'</span>, <span class=\\\"hljs-string\\\">'deep.key'</span>)  \\n   reactionMethod(val, deepKey, dispose) {  \\n     <span class=\\\"hljs-comment\\\">// 当 `this.val` `this.deep.key`  </span>\\n     <span class=\\\"hljs-comment\\\">// 发生改变之后，将会触发该方法  </span>\\n     <span class=\\\"hljs-comment\\\">// 与`autorun`不同的是，它第一次不会被触发  </span>\\n  \\n     <span class=\\\"hljs-comment\\\">// 调用 dispose 则会销毁掉该监听  </span>\\n     dispose &#x26;&#x26; dispose()  \\n   }  \\n}  </code></pre>\\n<h2 id=\\\"reactstoragesync\\\"><a href=\\\"#reactstoragesync\\\" aria-hidden=\\\"true\\\"><span class=\\\"icon icon-link\\\"></span></a>reactStorageSync</h2>\\n<p><a href=\\\"https://github.com/be-fe/react-mobx-vm/blob/2138b241540679e784e641a40781b5fdec56fd37/src/decorator/storageSync/react.js#L11-L15\\\" title=\\\"Source code on GitHub\\\">src/decorator/storageSync/react.js:11-15</a>  </p>\\n<p>View 层的数据（localStorage）存储同步  </p>\\n<p><strong>Parameters</strong>  </p>\\n<ul>\\n<li>\\n<p><code>storageKey</code>  {string} (optional, default <code>property</code>)  </p>\\n</li>\\n<li>\\n<p><code>options</code>  {string} 参考<a href=\\\"#reacturlsync\\\">reactUrlSync</a>  </p>\\n</li>\\n</ul>\\n<h2 id=\\\"reacturlsync\\\"><a href=\\\"#reacturlsync\\\" aria-hidden=\\\"true\\\"><span class=\\\"icon icon-link\\\"></span></a>reactUrlSync</h2>\\n<p><a href=\\\"https://github.com/be-fe/react-mobx-vm/blob/2138b241540679e784e641a40781b5fdec56fd37/src/decorator/urlSync/react.js#L11-L15\\\" title=\\\"Source code on GitHub\\\">src/decorator/urlSync/react.js:11-15</a>  </p>\\n<p>用于同步状态至 URL，不同于 <a href=\\\"#urlsync\\\"><code>urlSync</code></a> 的地方是，<code>reactUrlSync</code> 用于 react 视图层  </p>\\n<p><strong>Parameters</strong>  </p>\\n<ul>\\n<li>\\n<p><code>urlKey</code>  {string} - 状态对应URL上的 key (optional, default <code>property</code>)  </p>\\n</li>\\n<li>\\n<p><code>options</code>  {Object} - 选项  </p>\\n<ul>\\n<li><code>options.initialWrite</code>  {boolean}<br>\\n是否在第一次加载时候，将状态值写至 URL (optional, default <code>false</code>)  </li>\\n</ul>\\n</li>\\n</ul>\\n<p><strong>Examples</strong>  </p>\\n<pre><code class=\\\"hljs language-javascript\\\" data-query=\\\"{}\\\" data-lang=\\\"javascript\\\"><span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">View</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">React</span>.<span class=\\\"hljs-title\\\">Component</span> </span>{  \\n     @reactUrlSync  \\n     @observable sync = <span class=\\\"hljs-string\\\">'abc'</span>  \\n }  </code></pre>\\n<h2 id=\\\"registerurlsync\\\"><a href=\\\"#registerurlsync\\\" aria-hidden=\\\"true\\\"><span class=\\\"icon icon-link\\\"></span></a>registerUrlSync</h2>\\n<p><a href=\\\"https://github.com/be-fe/react-mobx-vm/blob/2138b241540679e784e641a40781b5fdec56fd37/src/decorator/urlSync/core.js#L39-L41\\\" title=\\\"Source code on GitHub\\\">src/decorator/urlSync/core.js:39-41</a>  </p>\\n<p><strong>Parameters</strong>  </p>\\n<ul>\\n<li>\\n<p><code>history</code> <strong>RouterHistory</strong> <a href=\\\"https://github.com/ReactTraining/react-router/blob/master/packages/react-router/docs/api/history.md\\\">See more information</a>  </p>\\n</li>\\n</ul>\\n<p><strong>Examples</strong>  </p>\\n<pre><code class=\\\"hljs language-javascript\\\" data-query=\\\"{}\\\" data-lang=\\\"javascript\\\"><span class=\\\"hljs-keyword\\\">import</span> { hashHistory, Router } <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-string\\\">'react-router'</span>  \\nregisterUrlSync(hashHistory)  \\n  \\n&#x3C;Router routes={routes} history={hashHistory} />  </code></pre>\\n<h2 id=\\\"stateinout\\\"><a href=\\\"#stateinout\\\" aria-hidden=\\\"true\\\"><span class=\\\"icon icon-link\\\"></span></a>stateInOut</h2>\\n<p><a href=\\\"https://github.com/be-fe/react-mobx-vm/blob/2138b241540679e784e641a40781b5fdec56fd37/src/decorator/stateInOut.js#L25-L80\\\" title=\\\"Source code on GitHub\\\">src/decorator/stateInOut.js:25-80</a>  </p>\\n<p>绑定 Model 至 View 中，将会挂载一些 View 的<a href=\\\"/advanced/life-cycle\\\">生命周期</a>至 Model 中  </p>\\n<p><strong>Parameters</strong>  </p>\\n<ul>\\n<li>\\n<p><code>StateClass</code> <strong><a href=\\\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\\\">function</a></strong>  </p>\\n</li>\\n<li>\\n<p><code>keyName</code> <strong><a href=\\\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\\\">string</a></strong>  (optional, default <code>'local'</code>)  </p>\\n</li>\\n<li>\\n<p><code>initData</code> <strong><a href=\\\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\\\">object</a></strong>  (optional, default <code>{}</code>)  </p>\\n</li>\\n</ul>\\n<p><strong>Examples</strong>  </p>\\n<pre><code class=\\\"hljs language-javascript\\\" data-query=\\\"{}\\\" data-lang=\\\"javascript\\\">@stateInOut(StateClass)  \\n<span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">View</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">React</span>.<span class=\\\"hljs-title\\\">Component</span> </span>{  \\n   render() {  \\n     <span class=\\\"hljs-comment\\\">// this.local 可以访问 StateClass 的实例  </span>\\n   }  \\n}  </code></pre>\\n<p>Returns <strong><a href=\\\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\\\">function</a></strong> View => View  </p>\\n<h2 id=\\\"stateless\\\"><a href=\\\"#stateless\\\" aria-hidden=\\\"true\\\"><span class=\\\"icon icon-link\\\"></span></a>stateless</h2>\\n<p><a href=\\\"https://github.com/be-fe/react-mobx-vm/blob/2138b241540679e784e641a40781b5fdec56fd37/src/decorator/stateless.js#L19-L23\\\" title=\\\"Source code on GitHub\\\">src/decorator/stateless.js:19-23</a>  </p>\\n<p>用于书写一些无组件自身状态的简单组件  </p>\\n<p><strong>Parameters</strong>  </p>\\n<ul>\\n<li>\\n<p><code>func</code>  {function} (local, props) => ReactElement  </p>\\n</li>\\n<li>\\n<p><code>localKey</code>  {string} (optional, default <code>'local'</code>)  </p>\\n</li>\\n</ul>\\n<p><strong>Examples</strong>  </p>\\n<pre><code class=\\\"hljs language-javascript\\\" data-query=\\\"{}\\\" data-lang=\\\"javascript\\\"><span class=\\\"hljs-keyword\\\">export</span> <span class=\\\"hljs-keyword\\\">default</span> stateless(<span class=\\\"hljs-function\\\">(<span class=\\\"hljs-params\\\">local, props</span>) =></span>  \\n  &#x3C;div><span class=\\\"xml\\\"><span class=\\\"hljs-tag\\\">&#x3C;/<span class=\\\"hljs-name\\\">div</span>></span></span>  \\n)  </code></pre>\\n<p>Returns <strong><a href=\\\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\\\">function</a></strong> props => ReactElement  </p>\\n<h2 id=\\\"storagesync\\\"><a href=\\\"#storagesync\\\" aria-hidden=\\\"true\\\"><span class=\\\"icon icon-link\\\"></span></a>storageSync</h2>\\n<p><a href=\\\"https://github.com/be-fe/react-mobx-vm/blob/2138b241540679e784e641a40781b5fdec56fd37/src/decorator/storageSync/state.js#L11-L15\\\" title=\\\"Source code on GitHub\\\">src/decorator/storageSync/state.js:11-15</a>  </p>\\n<p>Model层的数据（localStorage）存储同步  </p>\\n<p><strong>Parameters</strong>  </p>\\n<ul>\\n<li>\\n<p><code>storageKey</code>  {string} (optional, default <code>property</code>)  </p>\\n</li>\\n<li>\\n<p><code>options</code>  {string} 参考<a href=\\\"#reacturlsync\\\">reactUrlSync</a>  </p>\\n</li>\\n</ul>\\n<p><strong>Examples</strong>  </p>\\n<pre><code class=\\\"hljs language-javascript\\\" data-query=\\\"{}\\\" data-lang=\\\"javascript\\\"><span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">Model</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">Root</span> </span>{  \\n   @storageSync  \\n   @observable data = { <span class=\\\"hljs-attr\\\">arr</span>: [<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-number\\\">3</span>] }  \\n}  \\n<span class=\\\"hljs-comment\\\">// 在修改了 `model.data` 之后，查看 `localStorage` 中的数据  </span></code></pre>\\n<h2 id=\\\"urlsync\\\"><a href=\\\"#urlsync\\\" aria-hidden=\\\"true\\\"><span class=\\\"icon icon-link\\\"></span></a>urlSync</h2>\\n<p><a href=\\\"https://github.com/be-fe/react-mobx-vm/blob/2138b241540679e784e641a40781b5fdec56fd37/src/decorator/urlSync/state.js#L11-L15\\\" title=\\\"Source code on GitHub\\\">src/decorator/urlSync/state.js:11-15</a>  </p>\\n<p>用于同步状态至 URL  </p>\\n<p><strong>Examples</strong>  </p>\\n<pre><code class=\\\"hljs language-javascript\\\" data-query=\\\"{}\\\" data-lang=\\\"javascript\\\"><span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">Model</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title\\\">Root</span> </span>{  \\n  @urlSync  \\n  @observable sync = <span class=\\\"hljs-string\\\">'abc'</span>  \\n  <span class=\\\"hljs-comment\\\">// 未使用 @observable 修饰, urlSync会自动将其转为 observable  </span>\\n  @urlSync(<span class=\\\"hljs-string\\\">'g'</span>)  \\n  value = <span class=\\\"hljs-string\\\">'abcdef'</span>  \\n}  </code></pre>\\n\",\n  \"extra\": {}\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/picidae/lib/lib/loaders/markdown-loader!./docs/api/decorator.md\n// module id = 1002\n// module chunks = 10"],"sourceRoot":""}